Paper Summary: Comparative Investigation of GPU-Accelerated Triangle-Triangle Intersection Algorithms for Collision Detection
Overview
The paper investigates and compares three GPU-accelerated triangle-triangle intersection algorithms for use in collision detection within large-scale 3D triangulated models. Efficient collision detection is critical for applications such as 3D modeling, gaming, robotics, and simulations, where models are becoming increasingly complex. The study focuses on leveraging the massive parallel computing power of Graphics Processing Units (GPUs) to speed up this process.

Problem Statement
Efficient collision detection among 3D geometric models is a computational challenge due to:

The large number of triangles involved in detailed models.
The need for real-time processing in interactive applications.
Existing serial (CPU-based) methods are computationally inefficient when handling billions of triangle pairs. The paper addresses this issue by developing and comparing three parallel GPU-based algorithms to:

Reduce the number of potentially intersecting triangles using a bounding volume hierarchy (AABB).
Accurately test the remaining triangle pairs for intersection using optimized algorithms.
Algorithms Involved
The study implements three widely recognized triangle-triangle intersection algorithms on the GPU:

Möller’s Algorithm:
Approach: Simplifies the intersection problem by determining the intersection of line segments and triangles.
Method: Calculates the intersection line of two planes containing the triangles and then checks for overlapping intervals on this line.
Devillers’ and Guigue’s Algorithm:
Approach: Uses determinants to compute the relative positions of triangles.
Method: Defines the intersection by checking the signs of determinants for specific triangle points. This approach requires fewer arithmetic operations, improving performance and robustness.
Shen’s Algorithm:
Approach: Similar to Devillers' and Guigue's but uses vector discriminants to determine intersection.
Method: Checks the signs of distances between line segments instead of determinants.
Key Contributions
GPU-Accelerated Implementation:

The authors implement three parallel triangle-triangle intersection algorithms on a GPU, leveraging parallel computation to significantly improve processing speed.
Two-Stage Collision Detection Method:

Stage 1: Reduces potential triangle pairs using Axis-Aligned Bounding Boxes (AABBs) to efficiently eliminate non-intersecting triangles.
Stage 2: Performs intersection tests on the reduced set of triangles using the three algorithms (Möller’s, Devillers’ and Guigue’s, and Shen’s).
Performance Comparison:

Benchmarks are conducted on four large datasets involving billions of triangle pairs. The GPU implementations achieve:
50x to 60x speedup compared to serial (CPU-based) methods.
Collision detection for 1.5 billion triangle pairs in under 0.5 seconds.
Algorithm Recommendation:

Devillers’ and Guigue’s Algorithm is identified as the most efficient and robust for GPU-based collision detection due to its:
Fewer arithmetic operations.
Better handling of numerical precision issues.
Conclusion
The paper demonstrates that GPU-accelerated collision detection vastly improves performance over traditional CPU-based methods. The research highlights the Devillers’ and Guigue’s algorithm as the optimal choice for practical applications involving large-scale 3D triangulated models, providing a substantial contribution to fields requiring real-time collision detection.